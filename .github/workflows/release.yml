name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get dependencies
      run: go mod download

    - name: Run tests
      run: go test -v $(go list ./... | grep -v '/debug')

    - name: Run build test
      run: go build -v .

  build:
    name: Build Binaries
    needs: test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            output: makemigrations-linux-amd64
          - goos: linux
            goarch: arm64
            output: makemigrations-linux-arm64
          - goos: darwin
            goarch: amd64
            output: makemigrations-darwin-amd64
          - goos: darwin
            goarch: arm64
            output: makemigrations-darwin-arm64
          - goos: windows
            goarch: amd64
            output: makemigrations-windows-amd64.exe
          - goos: windows
            goarch: arm64
            output: makemigrations-windows-arm64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get dependencies
      run: go mod download

    - name: Extract version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        # Build with version information and optimization flags
        go build \
          -ldflags="-s -w -X github.com/ocomsoft/makemigrations/internal/version.Version=${{ steps.version.outputs.version }} -X github.com/ocomsoft/makemigrations/internal/version.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X github.com/ocomsoft/makemigrations/internal/version.GitCommit=${GITHUB_SHA:0:8}" \
          -o ${{ matrix.output }} \
          .

        # Verify the binary
        ls -la ${{ matrix.output }}

        # Test the binary can run (except for Windows on Linux)
        if [ "${{ matrix.goos }}" != "windows" ]; then
          ./${{ matrix.output }} --version || echo "Binary test failed"
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.output }}
        path: ${{ matrix.output }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find ./artifacts -type f -exec cp {} release-assets/ \;
        ls -la release-assets/

    - name: Generate checksums
      run: |
        cd release-assets
        sha256sum * > checksums.txt
        echo "Generated checksums:"
        cat checksums.txt

    - name: Extract version and create release notes
      id: release_info
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

        # Check if this is a pre-release
        if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
          echo "prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "prerelease=false" >> $GITHUB_OUTPUT
        fi

        # Create release notes
        cat > release_notes.md << EOF
        # Release $VERSION

        ## Django-style Migration Generator for Go

        This release provides cross-platform binaries for the makemigrations tool.

        ### Supported Platforms
        - **Linux**: amd64, arm64
        - **macOS**: amd64 (Intel), arm64 (Apple Silicon)
        - **Windows**: amd64, arm64

        ### Quick Installation

        #### Linux/macOS
        \`\`\`bash
        # Download and install (replace with your platform/arch)
        curl -L "https://github.com/ocomsoft/makemigrations/releases/download/$VERSION/makemigrations-linux-amd64" -o makemigrations
        chmod +x makemigrations
        sudo mv makemigrations /usr/local/bin/

        # Verify installation
        makemigrations --version
        \`\`\`

        #### Windows (PowerShell)
        \`\`\`powershell
        # Download (replace with your architecture)
        Invoke-WebRequest -Uri "https://github.com/ocomsoft/makemigrations/releases/download/$VERSION/makemigrations-windows-amd64.exe" -OutFile "makemigrations.exe"

        # Add to PATH or use directly
        .\makemigrations.exe --version
        \`\`\`

        ### Available Downloads
        - \`makemigrations-linux-amd64\` - Linux x86_64
        - \`makemigrations-linux-arm64\` - Linux ARM64
        - \`makemigrations-darwin-amd64\` - macOS Intel
        - \`makemigrations-darwin-arm64\` - macOS Apple Silicon
        - \`makemigrations-windows-amd64.exe\` - Windows x86_64
        - \`makemigrations-windows-arm64.exe\` - Windows ARM64
        - \`checksums.txt\` - SHA256 checksums for verification

        ### Verification
        Verify your download with SHA256 checksums:
        \`\`\`bash
        sha256sum -c checksums.txt
        \`\`\`

        ### Getting Started
        \`\`\`bash
        # Initialize a new project
        makemigrations init

        # Generate migrations from YAML schemas
        makemigrations makemigrations

        # Convert Go structs to YAML schema
        makemigrations struct2schema

        # Get help
        makemigrations --help
        \`\`\`

        For detailed documentation and examples, visit our [GitHub repository](https://github.com/ocomsoft/makemigrations).
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-assets/*
        body_path: release_notes.md
        draft: false
        prerelease: ${{ steps.release_info.outputs.prerelease }}
        generate_release_notes: true
        tag_name: ${{ steps.release_info.outputs.version }}
        name: Release ${{ steps.release_info.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}